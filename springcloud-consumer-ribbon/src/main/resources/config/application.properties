server.port=6082
server.servlet.context-path=/

eureka.client.service-url.defaultZone=http://eureka01:7081/eureka,http://eureka02:7082/eureka,http://eureka03:7083/eureka
# consumer是否要向eureka去注册呢？
eureka.client.register-with-eureka=false

#---------------ribbon负载均衡脱离eureka注册中心
# ribbon独立实现负载均衡，不再使用eureka(无法使用APPLICATION的值)
# 让ribbon禁用eureka
ribbon.eureka.enabled=false
# 既然ribbon已经脱离了eureka，还仍然要使用负载均衡功能，就必须要让ribbon知道所有的provider是谁
# 写法是固定的，需要根据自己代码的业务来写(需要根据provider项目的spring.application.name的值来写)
# 也就是说三台provider的spring.application.name的值仍然不能改变
# book-provider需要根据自己的代码来更改，后面ribbon.listOfServers是固定的
book-provider.ribbon.listOfServers=localhost:8081,localhost:8082,localhost:8083
# 必须要规定ribbon的负载均衡算法策略是什么(这里没有默认值)
# NFLoadBalancerRuleClassName：配置了ribbon所提供负载均衡算法类的全限定名
book-provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule